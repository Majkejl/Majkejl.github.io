struct c_Uniforms
{
    time: f32,
}

@group(0) @binding(0) var<uniform> u: c_Uniforms;
@group(0) @binding(1) var heightTexture: texture_storage_2d<rgba8unorm, write>;


@compute @workgroup_size(32, 32, 1)
fn cs_main(@builtin(global_invocation_id) id : vec3<u32>) {
    var height = 0.0;
    for (var i = 1; i <= 10; i++)
    {
        height += pow(0.5, f32(i + 2)) * (sin(f32(id.x + u32(i)) * 0.05 * f32(i) + u.time));
        height += pow(0.5, f32(i + 2)) * (sin(f32(id.y + u32(i)) * 0.05 * f32(i) + u.time));
    }
    textureStore(heightTexture, vec2i(id.xy), vec4f(height + 0.5));
}
// /**
//  * A structure with fields labeled with vertex attribute locations can be used
//  * as input to the entry point of a shader.
//  */
struct VertexInput {
	@location(0) position: vec3f,
	//@location(1) color: vec3f,
};

// /**
//  * A structure with fields labeled with builtins and locations can also be used
//  * as *output* of the vertex shader, which is also the input of the fragment
//  * shader.
//  */
struct VertexOutput {
	@builtin(position) position: vec4f,
	// The location here does not refer to a vertex attribute, it just means
	// that this field must be handled by the rasterizer.
	// (It can also refer to another field of another struct that would be used
	// as input to the fragment shader.)
	@location(0) fs_position: vec3f,
	@location(1) fs_normal: vec3f,
};

struct MyUniforms
{
	model: mat4x4<f32>,
	view: mat4x4<f32>,
	proj: mat4x4<f32>,
	eye: vec3f,
}

// The memory location of the uniform is given by a pair of a *bind group* and a *binding*
@group(0) @binding(0) var<uniform> u: MyUniforms;
@group(0) @binding(1) var heightTexture: texture_2d<f32>; 
@group(0) @binding(2) var textureSampler: sampler;

@vertex
fn vs_main(in: VertexInput) -> VertexOutput {
    var out: VertexOutput;

    out.fs_position = (u.model * vec4f(in.position.xyz, 1.0)).xyz;
	
	let tex_pos = vec2i((out.fs_position.xy + 1.0) * 159.5);
	let height = textureLoad(heightTexture, tex_pos, 0).r * 0.3;
	out.fs_position.z = height;

    out.position = u.proj * u.view * u.model * vec4f(in.position.xy, height, 1.0);
    return out;
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4f {
	return vec4f(textureSample(heightTexture, textureSampler, (in.fs_position.xy + 1.0) / 2.0).rrr, 1.0);
}
[points]
# x   y      r   g   b

0.5   0.0    0.0 0.353 0.612
1.0   0.866  0.0 0.353 0.612
0.0   0.866  0.0 0.353 0.612

0.75  0.433  0.0 0.4   0.7
1.25  0.433  0.0 0.4   0.7
1.0   0.866  0.0 0.4   0.7

1.0   0.0    0.0 0.463 0.8
1.25  0.433  0.0 0.463 0.8
0.75  0.433  0.0 0.463 0.8

1.25  0.433  0.0 0.525 0.91
1.375 0.65   0.0 0.525 0.91
1.125 0.65   0.0 0.525 0.91

1.125 0.65   0.0 0.576 1.0
1.375 0.65   0.0 0.576 1.0
1.25  0.866  0.0 0.576 1.0

[indices]
 0  1  2
 3  4  5
 6  7  8
 9 10 11
12 13 14